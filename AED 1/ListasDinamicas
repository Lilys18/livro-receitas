#include <stdio.h>
#include <stdlib.h>

typedef struct no{
    int info;
    struct no *prox;
}no;

no *inicioL; //por enquanto usaremos como variavel global

//info -> elemento
//prox -> endereco do proximo elemento
//no -> nó
//inicioL -> indica o endereco do primeiro elemento da lista

void inicializarLista(){
    inicioL = NULL;
}

int listaVazia(){
    if(inicioL == NULL)
    return 1;

    return 0; //else
}

void insereNoInicio(int valor){
    no *aux;
    aux = (no*) malloc (sizeof(no));
//reserva um espaco na memória pra essa insercao, sendo que aux armazena esse endereco
    if(aux != NULL)
        aux -> info = valor;
//para acessar elementos de uma estrutura usando um ponteiro
    else
        printf("Não foi possível inserir!");
//caso a memória esteja lotada o aux não receberá nenhum valor (NULL),
//visto que não há mais espaço na memória
    aux -> prox = inicioL;
//aux recebe o prox de inicioL, endereco do elemento que está no inicio da lista
    inicioL = aux;
//inicioL recebe o valor info de aux
}

void percorrer(){
    no *aux;
    if(!listaVazia()){
        aux = inicioL;
        while(aux!=NULL){
            printf("%d", aux->info);
            aux = aux->prox;
        }
    }
    else
    printf("\nLista vazia!");
}

int main(){
    int valor, opcao;
    inicializarLista();
    do{
        printf("\n1-Inserir pelo início.\n2-Percorrer.\n3-Sair");
        printf("\nDigite sua escolha: ");
        scanf("%d", &opcao);
        if(opcao!=1 && opcao!=2 && opcao!=3)
        printf("Opção inválida.");
        else{
            if(opcao==1){
                printf("Insira valor: ");
                scanf("%d", &valor);
                insereNoInicio(valor);
            }
            else{
                if(opcao==2)
                    percorrer();
                else
                    printf("\nEncerrando...");
            }
        }
    }while(opcao!=3);

return 0;
}
