#include <stdio.h>
#include <stdlib.h>

typedef struct no{
    int info;
    struct no *prox;
}no;

no *inicioL; //por enquanto usaremos como variavel global

//info -> elemento
//prox -> endereco do proximo elemento
//no -> nó
//inicioL -> indica o endereco do primeiro elemento da lista

void inicializarLista(){
    inicioL = NULL;
}

int listaVazia(){
    if(inicioL == NULL)
    return 1;

    return 0; //else
}

void insereNoInicio(int valor){
    no *aux;
    aux = (no*) malloc (sizeof(no));
//reserva um espaco na memória pra essa insercao, sendo que aux armazena esse endereco
    if(aux != NULL)
        aux -> info = valor;
//para acessar elementos de uma estrutura usando um ponteiro
    else
        printf("Não foi possível inserir!");
//caso a memória esteja lotada o aux não receberá nenhum valor (NULL),
//visto que não há mais espaço na memória
    aux -> prox = inicioL;
//aux recebe o prox de inicioL, endereco do elemento que está no inicio da lista
    inicioL = aux;
//inicioL recebe o valor info de aux
}

void percorrer(){
    no *aux;
    if(!listaVazia()){
        aux = inicioL;
        while(aux!=NULL){
            printf("%d", aux -> info);
            aux = aux->prox;
        }
    }
    else
    printf("\nLista vazia!");
}

void insereNoFinal(int valor){
    no *aux, *p;
    aux = (no*)malloc(sizeof(no));
    if(aux!=NULL){
        aux->info = valor;
        aux->prox = NULL;
        if(!listaVazia()){
            p = inicioL;
            while(p -> prox!= NULL){
                p = p->prox;
            }
            p->prox = aux;
        }
        else{
            inicioL = aux;
        }
    }
}

void removeNoMeio(int valor){
    no *ant, *aux;
    aux = inicioL;
    ant = NULL;
    if(!listaVazia()){
        //procurar pelo nó a remover
        while(aux!=NULL && aux->info!=valor){
            ant = aux;
            aux = aux->prox;
        }
        if(aux==NULL){
            printf("\nValor desejado não encontrado na lista\n");
        }
        else{ //encontrei o elemento desejado
            if(ant==NULL){ //primeiro da lista
                inicioL = aux->prox;
            }
            else{
                ant->prox = aux->prox;
            }
        }
        free (aux);
    }
    else{
        printf("Lista vazia");
    }
}

int main(){
    int valor;// opcao;
    inicializarLista();
    insereNoFinal(1);
    insereNoFinal(6);
    insereNoFinal(9);
    insereNoFinal(15);
    percorrer();
    removeNoMeio(9);
    printf("\n");
    percorrer();

return 0;
}
