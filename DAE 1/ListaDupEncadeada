#include <stdio.h>
#include <stdlib.h> 

typedef struct no{
    int info;
    struct no *ant;
    struct no *prox;
}no;

no *inicioE;
no*inicioD;

int inicializar(){
    inicioD = NULL;
    inicioE = NULL;
}

int listaVazia(){
    if(inicioD == NULL){ //basta verificar apenas um dos ponteiros
        return 1;   
    }
    return 0;
}

void inserirDireita(int valor){
    no *aux;
    aux = (no*)malloc(sizeof(no));
    if(aux!=NULL){
        aux->info = valor;
        aux->ant = NULL;
        aux->prox = NULL;
        if(listaVazia()){  //primeiro elemento
            inicioE = aux;
            inicioD = aux;
        }
        else{  //inserir pela direita
            aux->ant = inicioD;
            inicioD->prox = aux;
            inicioD = aux;
        }
    }else{
        printf("Erro!");
    }
}

void percorrerEsquerda(){
    no *aux;
    if(!listaVazia()){
        aux = inicioE;
        while(aux!=NULL){
            printf("%d ", aux->info);
            aux = aux->prox;
        }
    }
    else{
        printf("Lista vazia!");
    }
}

void percorrerDireita(){
    no *aux;
    if(!listaVazia()){
        aux = inicioD;
        while(aux!=NULL){
            printf("%d ", aux->info);
            aux = aux->ant;
        }
    }
    else{
        printf("Lista vazia!");
    }
}

no* buscaElem(int valor){
    no *aux;
    aux = inicioE;
    if(!listaVazia()){
        //procurar pelo elemento
        while(aux!=NULL && aux->info!=valor){
            aux = aux->prox;
        }
        return aux;
    }
    else{
        printf("Lista vazia");
    }
}

void remover(int valor){
    no *aux;
    if(!listaVazia()){
        aux = buscaElem(valor);
        if(aux!=NULL){               //encontrei
        
            if(inicioE == inicioD){ //há um único elemento na lista
                inicioE = NULL;
                inicioD = NULL;
                free(aux);
            }
            else{
                if(aux->ant == NULL){ //é o primeiro elemento pela esquerda
                    inicioE = aux->prox;
                    inicioE->ant = NULL;
                    free(aux);
                }
                else{
                    if(aux->prox == NULL){ //é o primeiro elemento pela direita
                    inicioD = aux->ant;
                    inicioD->prox = NULL;
                    free(aux);
                    }
                    else{           //elemento no meio
                        no* anterior = aux->ant;
                        no* posterior = aux->prox;
                        anterior->prox = posterior;
                        posterior->ant = anterior;
                        free(aux);
                    }
                }
            }
        }
        else
            printf("Valor não encontrado!");
            
    }
    else
        printf("Lista vazia!");
}
int main()
{
    int valor, opcao;
    inicializar();
    inserirDireita(5);
    inserirDireita(3);
    inserirDireita(8);
    printf("Percorrer esquerda: ");
    percorrerEsquerda();
    printf("\nPercorrer direita: ");
    percorrerDireita();
    printf("\nDigite o elemento procurado: ");
    scanf("%d", &valor);
    printf("Deseja excluir esse elemento?\n1-Sim\n2-Não\n->");
    scanf("%d", &opcao);
    if(opcao == 1){
        remover(valor);
        percorrerEsquerda();
    }
    else
        percorrerEsquerda();
    
    return 0;
}
